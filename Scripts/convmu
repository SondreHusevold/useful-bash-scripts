#!/bin/bash
# Music conversion script.

ROOT="$PWD"                                            # Folder which the conversion takes place (starts in $PWD unless -d argument is used).
COVER="-vn"                                            # Will not add embedded music art, unless argument -c is used.
COVEREXTRACT=false                                     # Will extract the album art if it exists.
INPUT=""                                               # All files with this extension will be converted
OUTPUT=""                                              # Into this output
SUBFOLDER=false                                        # Search through the subfolders or not.
QUALITY="128"                                          # Bitrate of output.
SEPERATEOUTPUT=false
MANUAL="Music conversion tool.

Usage: [-i] [-o] [-d] [-s] [-q] [-c] [-e]
    -i      Input format.
    -o      Output format.
    -d      Specify directory.
    -s      Go through subdirectories.
    -q      Specify bitrate (default: 128).
    -c      Keep covert art embedded.
    -e      Extract cover art to output folder.

 Examples:
     convert -i flac -o opus
     convert -i flac -o opus -s
     convert -i tta -o ogg -d ~/Desktop -s
     convert -i ape -o opus -d ~/Music -s -q 256 -c
     convert -i flac -o mp3 -d ~/Music -s -q 320 -e"

# ==================================================================================================
# Creates output folder and extracts cover art if wanted.
# It will then export all variables and the function "convert".
# This is needed due to Parallels only using exported functions.
# Since the function needs the variables in this script. Thus the variables must be exported as well.
# ==================================================================================================

function prepare {
    if [ ! -d "$ROOT/$OUTPUT" ]; then
        mkdir "$ROOT/$OUTPUT"
	# Seperate Output. Create Filename folder with album folders.
	if [ "$SEPERATEOUTPUT" = true ] ; then
		find . -type d | while read LINE; 
		do 
			mkdir "$ROOT/$OUTPUT/$LINE";
			if [ "$COVEREXTRACT" = true ] ; then
        			ffmpeg -i "$(find "$ROOT/$LINE" -name "*.$INPUT" | head -n 1)" -an -vcodec copy "$ROOT/$OUTPUT/$LINE/cover.jpg"
	    		fi
		done
	fi
    fi

    if ([ "$COVEREXTRACT" = true ] && [ "$SEPERATEOUTPUT" = false ]) ; then 
        ffmpeg -i "$(find "$ROOT" -name "*.$INPUT" | head -n 1)" -an -vcodec copy "$ROOT/$OUTPUT/cover.jpg"     
    fi

    export -f convert
    export COVER
    export COVEREXTRACT
    export INPUT
    export OUTPUT
    export QUALITY
    export ROOT
    export SEPERATEOUTPUT
}

# ==================================================================================================
# Conversion needs a function because Parallel can't handle commands containing Japanese characters.
# ==================================================================================================

convert () {
    if [ "$SEPERATEOUTPUT" = true ] ; then
	OUTPUTFOLDER=$(awk -F'/' '{print $(NF-1)}' <<< $1)
    	ffmpeg -i "$1" $COVER -b:a "$QUALITY"k "$ROOT/$OUTPUT/$OUTPUTFOLDER/$2.$OUTPUT"
    else
	ffmpeg -i "$1" $COVER -b:a "$QUALITY"k "$ROOT/$OUTPUT/$2.$OUTPUT"
    fi
}

# ==================================================================================================
# Uses find to search directories for input files. 
# Parallel will run the exported convert function with the path and basename as parameters.
# ==================================================================================================

function parallelize {    
    if [ "$SUBFOLDER" = true ] ; then
        find "$ROOT" -name "*.$INPUT" | parallel -q convert {} {/.}
    else
        find "$ROOT" -maxdepth 1 -name "*.$INPUT" | parallel -q convert {} {/.}
    fi

    echo "Conversion complete. You can find output at: $ROOT/$OUTPUT"
}

# ==================================================================================================
# This will parse the commandline.
# ==================================================================================================

if [ $# -eq 0 ]; then                                 # Must be at least i and o.
    echo "$USAGE" >&2
    exit 1
fi
 
while getopts i:o:d:q:csea OPT; do                     # Asks for -i, -o
    case $OPT in
    i)  INPUT="$OPTARG";;                             # -i is used, input file extension is applied.
    o)  OUTPUT="$OPTARG";;                            # -o is used, output file extention is applied.
    d)  ROOT="$OPTARG";;                              # -d is used, another directory that $pwd will be used.
    s)  SUBFOLDER=true;;                              # -s is used, subdirectories will be searched
    q)  QUALITY="$OPTARG";;                           # -q is used with a certain bitrate.
    a)  SEPERATEOUTPUT=true;;			      # -a is used, all folders will have their own output folder.
    c)  COVER="";;                                    # Removes -vn which effectively defaults into keeping the embedded cover art.
    e)  COVEREXTRACT=true;;
    \?)                                               # Invalid arguments. Show manual and kill.
        echo "$MANUAL" >&2
        exit 1 ;;
    esac
done

prepare
parallelize
